{:tasks
 {:requires ([babashka.fs :as fs]
             [clojure.string :as str])
  :init (def windows? (str/starts-with? (System/getProperty "os.name")
                                        "Windows"))
  run-main
  {:doc "Run main"
   :task (apply clojure "-M -m radish.main" *command-line-args*)}
  
  uberjar
  {:doc "Builds uberjar"
   :task (when (seq (fs/modified-since "radish.jar" "src"))
           (clojure "-X:uberjar"))}

  run-uber
  {:doc "Run uberjar"
   :depends [uberjar]
   :task (apply shell "java -jar radish.jar" *command-line-args*)}
  
  graalvm
  {:doc "Checks GRAALVM_HOME env var"
   :task
   (let [env (System/getenv "GRAALVM_HOME")]
     (assert "Set GRAALVM_HOME")
     env)}
  
  gen-reflect-config
  {:doc "Runs scripts/gen-reflect-config.clj on the compiled jar."
   :depends [graalvm uberjar]
   :task (binding [*command-line-args* ["java" "-jar" "radish.jar" "-i" "radish-basic.org"]]
           (load-file "scripts/gen-reflect-config.clj"))}

  native-image
  {:doc "Builds native image"
   :depends [graalvm uberjar gen-reflect-config]
   :task (do
           (shell (str (fs/file graalvm
                                "bin"
                                (if windows?
                                  "gu.cmd"
                                  "gu")))
                  "install" "native-image")
           (shell (str (fs/file graalvm
                                "bin"
                                (if windows?
                                  "native-image.cmd"
                                  "native-image")))
                  "-H:Name=radish"
                  "-H:ReflectionConfigurationFiles=reflect-config-cleaned.json"
                  "-jar" "radish.jar"
                  "--initialize-at-build-time"
                  "--no-fallback"
                  "--no-server"))}

  clean
  {:doc "Cleans up Native Image compilation artifacts"
   :task (do
           (shell "rm" "*.json")
           (shell "rm" "*.txt"))}}}
